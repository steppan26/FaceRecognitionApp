{"ast":null,"code":"var _jsxFileName = \"G:\\\\Documents\\\\GitHub\\\\facerecognitionapp\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Navigation from './components/navigation/Navigation';\nimport FaceRecognition from './components/faceRecognition/FaceRecognition';\nimport Logo from './components/logo/Logo';\nimport SignIn from './components/logo/Logo';\nimport Rank from './components/rank/Rank';\nimport Particles from 'react-particles-js';\nimport ImageLinkForm from './components/imageLinkForm/ImageLinkForm';\nimport Clarifai from 'clarifai';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst app = new Clarifai.App({\n  apiKey: '8509e0668a58483db493b84a27c67428'\n});\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 10,\n      density: {\n        enable: true,\n        value_area: 600\n      }\n    },\n    color: {\n      value: \"red\"\n    }\n  },\n  line_linked: {\n    enable_auto: true\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.calculateFaceLocation = data => {\n      const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      const image = document.getElementById(\"inputImage\");\n      const width = Number(image.width);\n      const height = Number(image.height);\n      return {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - clarifaiFace.right_col * width,\n        bottomRow: height - clarifaiFace.bottom_row * height\n      };\n    };\n\n    this.displayFaceBox = box => {\n      console.log(box);\n      this.setState({\n        box: box\n      });\n    };\n\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      app.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input).then(response => this.displayFaceBox(this.calculateFaceLocation(response))) // get the response which gets passed into the calculateFaceLocation function which in turn returns an object which gets passed into the displayFaceBox function to apply the result to the box state\n      .catch(err => console.log(err)); //catch any error and console log the error\n    };\n\n    this.state = {\n      input: \"\",\n      imageUrl: \"\",\n      box: {}\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Particles, {\n        className: \"particles\",\n        params: particlesOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: this.onInputChange,\n        onButtonSubmit: this.onButtonSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n        box: this.state.box,\n        imageUrl: this.state.imageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["G:/Documents/GitHub/facerecognitionapp/src/App.js"],"names":["React","Component","Navigation","FaceRecognition","Logo","SignIn","Rank","Particles","ImageLinkForm","Clarifai","app","App","apiKey","particlesOptions","particles","number","value","density","enable","value_area","color","line_linked","enable_auto","constructor","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","box","console","log","setState","onInputChange","event","input","target","onButtonSubmit","imageUrl","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Navigation from './components/navigation/Navigation'\nimport FaceRecognition from './components/faceRecognition/FaceRecognition'\nimport Logo from './components/logo/Logo'\nimport SignIn from './components/logo/Logo'\nimport Rank from './components/rank/Rank'\nimport Particles from 'react-particles-js';\nimport ImageLinkForm from './components/imageLinkForm/ImageLinkForm'\nimport Clarifai from 'clarifai';\nimport './App.css';\n\nconst app = new Clarifai.App({\n  apiKey: '8509e0668a58483db493b84a27c67428'\n});\n\n\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 10,\n      density: {\n        enable: true,\n        value_area: 600,\n      }\n    },\n    color: {\n      value: \"red\"\n    }\n  },\n  line_linked:{\n    enable_auto: true,\n  }\n}\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      input: \"\",\n      imageUrl: \"\",\n      box: {},\n    }\n  }\n\n  calculateFaceLocation = (data) => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box\n    const image = document.getElementById(\"inputImage\")\n    const width = Number(image.width)\n    const height = Number(image.height)\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height - (clarifaiFace.bottom_row * height)\n    }\n  }\n\n  displayFaceBox = (box) => {\n    console.log(box)\n    this.setState({box: box})\n  }\n\n  onInputChange = (event) =>{\n    this.setState({input: event.target.value})\n  }\n\n  onButtonSubmit = () =>{\n    this.setState({imageUrl: this.state.input})\n    app.models.predict(\n      Clarifai.FACE_DETECT_MODEL,\n      this.state.input)\n    .then( response => this.displayFaceBox(this.calculateFaceLocation(response))) // get the response which gets passed into the calculateFaceLocation function which in turn returns an object which gets passed into the displayFaceBox function to apply the result to the box state\n    .catch(err => console.log(err)) //catch any error and console log the error\n  }\n\n  render(){\n  return (\n    <div className=\"App\">\n      <Particles className=\"particles\"\n        params={particlesOptions} />\n      <Navigation />\n      <Logo />\n      <Rank />\n      <ImageLinkForm\n        onInputChange={this.onInputChange}\n        onButtonSubmit={this.onButtonSubmit}\n      />\n      <FaceRecognition box={this.state.box} imageUrl={this.state.imageUrl} />\n    </div>\n  );}\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}