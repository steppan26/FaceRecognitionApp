{"ast":null,"code":"var _jsxFileName = \"G:\\\\Documents\\\\GitHub\\\\facerecognitionapp\\\\smart_brain\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Navigation from './components/navigation/Navigation';\nimport FaceRecognition from './components/faceRecognition/FaceRecognition';\nimport Logo from './components/logo/Logo';\nimport SignIn from './components/signIn/SignIn';\nimport Rank from './components/rank/Rank';\nimport Register from './components/register/Register';\nimport Particles from 'react-particles-js';\nimport ImageLinkForm from './components/imageLinkForm/ImageLinkForm';\nimport Clarifai from 'clarifai';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst app = new Clarifai.App({\n  apiKey: '8509e0668a58483db493b84a27c67428'\n});\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 10,\n      density: {\n        enable: true,\n        value_area: 600\n      }\n    },\n    color: {\n      value: \"red\"\n    }\n  },\n  line_linked: {\n    enable_auto: true\n  }\n};\nconst initialState = {\n  input: \"\",\n  imageUrl: \"\",\n  box: {},\n  route: 'SignIn',\n  isSignedIn: false,\n  user: {\n    id: '',\n    name: \"\",\n    email: \"\",\n    entries: 0,\n    joined: \"\"\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.loadUser = data => {\n      this.setState({\n        user: {\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          entries: data.entries,\n          joined: data.joined\n        }\n      });\n    };\n\n    this.calculateFaceLocation = data => {\n      const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      const image = document.getElementById(\"inputImage\");\n      const width = Number(image.width);\n      const height = Number(image.height);\n      return {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - clarifaiFace.right_col * width,\n        bottomRow: height - clarifaiFace.bottom_row * height\n      };\n    };\n\n    this.displayFaceBox = box => {\n      this.setState({\n        box: box\n      });\n    };\n\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      app.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input).then(response => {\n        // get the response which gets passed into the calculateFaceLocation function which in turn returns an object which gets passed into the displayFaceBox function to apply the result to the box state\n        if (response) {\n          fetch('http://localhost:3000/image', {\n            method: 'put',\n            headers: {\n              'content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          }).then(response => response.json()).then(count => {\n            this.setState(Object.assign(this.state.user, {\n              entries: count\n            }));\n          });\n        }\n\n        this.displayFaceBox(this.calculateFaceLocation(response));\n      }).catch(err => console.log(err)); //catch any error and console log the error\n    };\n\n    this.onRouteChange = route => {\n      if (route === 'SignOut') {\n        this.setState(initialState);\n      } else if (route === 'home') {\n        this.setState({\n          isSignedIn: true\n        });\n      }\n\n      this.setState({\n        route: route\n      });\n    };\n\n    this.state = {\n      input: \"\",\n      imageUrl: \"\",\n      box: {},\n      route: 'SignIn',\n      isSignedIn: false,\n      user: {\n        id: '',\n        name: \"\",\n        email: \"\",\n        entries: 0,\n        joined: \"\"\n      }\n    };\n  }\n\n  render() {\n    const {\n      isSignedIn,\n      imageUrl,\n      route,\n      box\n    } = this.state; // destructure states to avoid having to repeatedly type this.state.\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Particles, {\n        className: \"particles\",\n        params: particlesOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n        isSignedIn: isSignedIn,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), route === 'home' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Rank, {\n          name: this.state.user.name,\n          entries: this.state.user.entries\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n          onInputChange: this.onInputChange,\n          onButtonSubmit: this.onButtonSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n          box: box,\n          imageUrl: imageUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }, this) : route === 'SignIn' ? /*#__PURE__*/_jsxDEV(SignIn, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Register, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["G:/Documents/GitHub/facerecognitionapp/smart_brain/src/App.js"],"names":["React","Component","Navigation","FaceRecognition","Logo","SignIn","Rank","Register","Particles","ImageLinkForm","Clarifai","app","App","apiKey","particlesOptions","particles","number","value","density","enable","value_area","color","line_linked","enable_auto","initialState","input","imageUrl","box","route","isSignedIn","user","id","name","email","entries","joined","constructor","loadUser","data","setState","calculateFaceLocation","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","onInputChange","event","target","onButtonSubmit","state","models","predict","FACE_DETECT_MODEL","then","response","fetch","method","headers","body","JSON","stringify","json","count","Object","assign","catch","err","console","log","onRouteChange","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Navigation from './components/navigation/Navigation'\nimport FaceRecognition from './components/faceRecognition/FaceRecognition'\nimport Logo from './components/logo/Logo'\nimport SignIn from './components/signIn/SignIn'\nimport Rank from './components/rank/Rank'\nimport Register from './components/register/Register'\nimport Particles from 'react-particles-js';\nimport ImageLinkForm from './components/imageLinkForm/ImageLinkForm'\nimport Clarifai from 'clarifai';\nimport './App.css';\n\nconst app = new Clarifai.App({\n  apiKey: '8509e0668a58483db493b84a27c67428'\n});\n\n\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 10,\n      density: {\n        enable: true,\n        value_area: 600,\n      }\n    },\n    color: {\n      value: \"red\"\n    }\n  },\n  line_linked:{\n    enable_auto: true,\n  }\n}\nconst initialState = {\n  input: \"\",\n  imageUrl: \"\",\n  box: {},\n  route: 'SignIn',\n  isSignedIn: false,\n  user: {\n    id: '',\n    name: \"\",\n    email: \"\",\n    entries: 0,\n    joined: \"\"\n  }\n}\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      input: \"\",\n      imageUrl: \"\",\n      box: {},\n      route: 'SignIn',\n      isSignedIn: false,\n      user: {\n        id: '',\n        name: \"\",\n        email: \"\",\n        entries: 0,\n        joined: \"\"\n      }\n    }\n  }\n\n  loadUser = (data) => {\n    this.setState({user: {\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      entries: data.entries,\n      joined: data.joined\n    }})\n  }\n\n\n  calculateFaceLocation = (data) => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box\n    const image = document.getElementById(\"inputImage\")\n    const width = Number(image.width)\n    const height = Number(image.height)\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height - (clarifaiFace.bottom_row * height)\n    }\n  }\n\n  displayFaceBox = (box) => {\n    this.setState({box: box})\n  }\n\n  onInputChange = (event) =>{\n    this.setState({input: event.target.value})\n  }\n\n  onButtonSubmit = () =>{\n    this.setState({imageUrl: this.state.input})\n    app.models.predict(\n      Clarifai.FACE_DETECT_MODEL,\n      this.state.input)\n    .then( response => { // get the response which gets passed into the calculateFaceLocation function which in turn returns an object which gets passed into the displayFaceBox function to apply the result to the box state\n      if (response) {\n        fetch('http://localhost:3000/image', {\n          method: 'put',\n          headers: {'content-Type': 'application/json'},\n          body: JSON.stringify({\n              id : this.state.user.id,\n          })\n        })\n        .then(response => response.json())\n        .then(count => {\n          this.setState(Object.assign(this.state.user, { entries: count }))\n        })\n      }\n      this.displayFaceBox(this.calculateFaceLocation(response))\n    })\n    .catch(err => console.log(err)) //catch any error and console log the error\n  }\n\n  onRouteChange = (route) =>{\n    if (route === 'SignOut'){\n      this.setState(initialState)\n    } else if (route === 'home'){\n      this.setState({isSignedIn: true})\n    }\n    this.setState({route: route})\n  }\n\n  render(){\n    const { isSignedIn, imageUrl, route, box } = this.state // destructure states to avoid having to repeatedly type this.state.\n    return (\n      <div className=\"App\">\n        <Particles className=\"particles\"\n          params={particlesOptions} />\n        <Navigation isSignedIn={isSignedIn} onRouteChange={this.onRouteChange}/>\n        { route === 'home'\n          ? <div>\n            <Logo />\n            <Rank name={this.state.user.name} entries={this.state.user.entries} />\n            <ImageLinkForm\n              onInputChange={this.onInputChange}\n              onButtonSubmit={this.onButtonSubmit}\n            />\n            <FaceRecognition box={box} imageUrl={imageUrl} />\n          </div>\n          : ( route === 'SignIn'\n          ? <SignIn loadUser={this.loadUser} onRouteChange={this.onRouteChange}/>\n          : <Register loadUser={this.loadUser} onRouteChange={this.onRouteChange}/>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}